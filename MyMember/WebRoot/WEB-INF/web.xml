<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" 
	xmlns="http://java.sun.com/xml/ns/j2ee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<!-- spring config -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/config/spring/applicationContext.xml
		</param-value>
	</context-param>
	<!-- Log4j config -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>member.root</param-value>
	</context-param>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>WEB-INF/config/common/log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>3000</param-value>
	</context-param>
	
    <!-- spring listener -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>	
	<!-- spring scope request or session -->
	
	<!-- 有了这个监听，就可以在spring配置文件中用scope="session" 了 -->
	<!-- 不然你用prototype每次都创建一个对象，会浪费资源，用session属性可以减少对象的创建 -->
	<listener>
		<listener-class>
			org.springframework.web.context.request.RequestContextListener 
		</listener-class> 
	</listener>
	<!-- spring Log4j listener -->
	<listener>
		<listener-class>
			org.springframework.web.util.Log4jConfigListener
		</listener-class>
	</listener>	
		
	<!-- struts2 filter -->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>
			org.apache.struts2.dispatcher.FilterDispatcher
		</filter-class>
		<init-param>
			<param-name>config</param-name>
			<param-value>
				struts-default.xml, 
				struts-plugin.xml,
				../config/struts/struts.xml,
				../config/struts/struts-login.xml,
				../config/struts/struts-sms.xml
			</param-value>
		</init-param>
		<init-param>
			<param-name>debug</param-name>
			<param-value>2</param-value>
		</init-param>
	</filter>
	
	<!-- 
	<filter>
		<filter-name>loginfilter</filter-name>
		<filter-class>com.pro.filter.SecurityFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>loginfilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	 -->
	<!-- SetCharacterEncoding filter mapping -->
	<!-- struts2 filter mapping -->
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	
	
	<welcome-file-list>
		<welcome-file>login.jsp</welcome-file>
	</welcome-file-list>
</web-app>
